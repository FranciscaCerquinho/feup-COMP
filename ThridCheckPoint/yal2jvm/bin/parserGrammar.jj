/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parserGrammar.jj */
/*@egen*/options
{
  LOOKAHEAD=1;
             
  static=false;
}

PARSER_BEGIN(parserGrammar)

import java.io.*;

public class parserGrammar/*@bgen(jjtree)*/implements parserGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTparserGrammarState jjtree = new JJTparserGrammarState();

/*@egen*/
  public static int NumberErrors=0;

  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    /* Open File */

	 /* Open File */
	 InputStream stream=null;

	 try{
	   stream = new FileInputStream(args[0]);
	 }
	 catch(FileNotFoundException e){
	   System.out.println("usage: java Yal2jvm"+ args[0]);
	   System.exit(0);
	 }


	
    parserGrammarTokenManager tm= new parserGrammarTokenManager(new SimpleCharStream(stream));

    parserGrammar parser = new parserGrammar(stream);

  	/* Parser creation */
  	/*parserGrammar parser = new parserGrammar(System.in);//em vez de System.in, passar o nome da variavel do ficheiro*/
  	ASTModule root = parser.Module();

  	/* AST Print */
  	System.out.println("//////////////////////////////");
  	System.out.println("//// Abstract Syntax Tree ////");
  	System.out.println("//////////////////////////////");
  	System.out.println("");
    root.dump("");


  	System.out.println("");
  	System.out.println("//////////////////////////////");
  	System.out.println("/////// Semantic Tree ////////");
  	System.out.println("//////////////////////////////");
  	System.out.println("");
    root.analyse(null);

    System.out.println("");
  	System.out.println("//////////////////////////////");
  	System.out.println("/////////// Jasmin ///////////");
  	System.out.println("//////////////////////////////");
  	System.out.println("");

    String line = "";
    line = root.convertToByteCodes(null);
	String filename;

	if(args[0].contains("/")){
		String[] fileTemp = args[0].split("/");
		filename = fileTemp[1];
		filename = filename.substring(0, filename.lastIndexOf('.'));
		System.out.println("The " + filename + ".j file was generated from the file " + fileTemp[1]);
	}
	else{
		filename =args[0];
		filename = filename.substring(0, filename.lastIndexOf('.'));
		System.out.println("The " + filename + ".j file was generated from the file " + filename);
	}
  

    
    

    try {
      PrintWriter writer = new PrintWriter(filename+".j", "UTF-8");
      writer.println(line);
      writer.close();
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
}

PARSER_END(parserGrammar)

JAVACODE
void skipto(int kind) {/*@bgen(jjtree) skipto */
ASTskipto jjtn000 = new ASTskipto(JJTSKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();  // generate the exception object.
  //System.out.println(e.toString());  // print the error message
  printMessagesError(e);
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".

}


JAVACODE
void skipto_do_not_consume_last(int kind) {/*@bgen(jjtree) skipto_do_not_consume_last */
ASTskipto_do_not_consume_last jjtn000 = new ASTskipto_do_not_consume_last(JJTSKIPTO_DO_NOT_CONSUME_LAST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();  // generate the exception object.
  //System.out.println(e.toString());  // print the error message
  printMessagesError(e);
  Token t;
  int token_kind;
  boolean consume = false;
  do{

	if(consume)
		t = getNextToken();

	token_kind = getToken(0).kind;

	consume = true;

  } while (token_kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

JAVACODE
void printMessagesError(ParseException exception) {/*@bgen(jjtree) printMessagesError */
     ASTprintMessagesError jjtn000 = new ASTprintMessagesError(JJTPRINTMESSAGESERROR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/

	if(NumberErrors == 0) {
		System.out.println("ERROR CATCHED");
	}

	NumberErrors++;

	//System.out.println("Number of errors: ",NumberErrors);

	System.out.println(exception.currentToken.next.image + " Line " +
	exception.currentToken.beginLine + " Column " +
	exception.currentToken.beginColumn);

	System.out.println("EXPECTED TOKENS");

	for(int i = 0; i < exception.expectedTokenSequences.length; i++) {
		for(int k = 0; k < exception.expectedTokenSequences[i].length; k++) {
			System.out.println(tokenImage[exception.expectedTokenSequences[i][k]]);
		}

	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
| <LPAR_RECT: "[">
| <RPAR_RECT: "]">
| <DOT: ".">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

ASTModule Module():{/*@bgen(jjtree) Module */
                    ASTModule jjtn000 = new ASTModule(JJTMODULE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Module */
        try {
/*@egen*/
  	<MODULE> t=<ID> { jjtn000.setName(t.image); } <LCHAVETA> ( Declaration() )*

	try {
  		( Function() )*
  		<RCHAVETA>

 	}catch(ParseException exception) {
		skipto(RCHAVETA);
 	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

 	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Declaration():{/*@bgen(jjtree) Declaration */
                    ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2;}
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	try {
		(LOOKAHEAD(<ID> <LPAR_RECT> <RPAR_RECT>) ArrayElement() | ScalarElement() )
		( <ASSIGN> ( ( <LPAR_RECT> ArraySize() <RPAR_RECT> )
		| (t1=<ADDSUB_OP> { jjtn000.setName(t1.image);})? t2=<INTEGER> { jjtn000.setNameInteger(t2.image);}) )?<PVIRG>


	}catch(ParseException exception) {
		System.out.println("CATCH DECLARATION");
		skipto(PVIRG);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Function():{/*@bgen(jjtree) Function */
                 ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
  	try {
  		( LOOKAHEAD(3) ( <FUNCTION> ( LOOKAHEAD(2) ArrayElement() | ScalarElement() )
  		 <ASSIGN> t=<ID> ) | ( <FUNCTION> t=<ID> )) <LPAR> { jjtn000.setName(t.image); }

	}catch(ParseException exception) {
		System.out.println("CATCH FUNCTION");
		 //System.out.println(exception.currentToken.image);
		 //System.out.println(exception.getMessage());
	  	skipto(LPAR);
	}

	try {
	  ( Varlist() )? <RPAR>

	}catch(ParseException exception) {
		System.out.println("CATCH VARLIST RPAR");
		skipto(RPAR);
	}

	<LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Varlist():{/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Varlist */
        try {
/*@egen*/
  	try {
		( LOOKAHEAD(2) ArrayElement() | ScalarElement() )
		( <VIRG> ( LOOKAHEAD(2) ArrayElement() | ScalarElement() ))*

	}catch(ParseException exception) {
		System.out.println("CATCH VARLIST");
		skipto_do_not_consume_last(RPAR);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElement():{/*@bgen(jjtree) ArrayElement */
                     ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	t=<ID> {jjtn000.setName(t.image); } "[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarElement():{/*@bgen(jjtree) ScalarElement */
                      ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScalarElement */
                try {
/*@egen*/
		t=<ID>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/

}

void Stmtlst():{/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
        try {
/*@egen*/
	try {
		( Stmt() )*
	}

	catch(ParseException exception) {
  		System.out.println("CATCH STMLST");
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmt():{/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
        try {
/*@egen*/
	try {
  		While()
		| If()
		| LOOKAHEAD(3) Assign()
		| CallStmt()
	}

	catch(ParseException exception) {
		System.out.println("CATCH STMT");
		skipto(PVIRG);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Assign():{/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
                try {
/*@egen*/
		Lhs() <ASSIGN> Rhs() <PVIRG>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void Lhs():{/*@bgen(jjtree) Lhs */
  ASTLhs jjtn000 = new ASTLhs(JJTLHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lhs */
                try {
/*@egen*/
 		LOOKAHEAD(2) ArrayAccess()
		| ScalarAccess()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void Rhs():{/*@bgen(jjtree) Rhs */
            ASTRhs jjtn000 = new ASTRhs(JJTRHS);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Rhs */
                try {
/*@egen*/
		( Term() ( ( t=<ARITH_OP> | t=<BITWISE_OP> | t=<ADDSUB_OP> ) Term() { jjtn000.setName(t.image); })? )
		| <LPAR_RECT> ArraySize() <RPAR_RECT>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void ArraySize():{/*@bgen(jjtree) ArraySize */
                  ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArraySize */
                try {
/*@egen*/
		ScalarAccess()
		| t=<INTEGER>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void Term():{/*@bgen(jjtree) Term */
             ASTTerm jjtn000 = new ASTTerm(JJTTERM);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Term */
                try {
/*@egen*/
		( t1=<ADDSUB_OP> { jjtn000.setName(t1.image); })?
		( t2=<INTEGER>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ { jjtn000.setNameInteger(t2.image); }
		| LOOKAHEAD(3) Call()
		| LOOKAHEAD(2) ArrayAccess()
		| ScalarAccess()
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void Exprtest():{/*@bgen(jjtree) Exprtest */
                 ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Exprtest */
  try {
/*@egen*/
  try {
 		<LPAR> Lhs() t=<RELA_OP> {jjtn000.setName(t.image); } Rhs() <RPAR>
	}

	catch (ParseException exception) {
		System.out.println("CATCH EXPRTEST");
  		skipto(RPAR);
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While():{/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/

	try {

		<WHILE> Exprtest() <LCHAVETA>
	}

	catch(ParseException exception) {

		System.out.println("CATCH WHILE");
		skipto(LCHAVETA);

	}

	Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void If():{/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
                try {
/*@egen*/
 		<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
 		( <ELSE> <LCHAVETA>	Stmtlst() <RCHAVETA> )?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void CallStmt():{/*@bgen(jjtree) CallStmt */
                 ASTCallStmt jjtn000 = new ASTCallStmt(JJTCALLSTMT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) CallStmt */
        try {
/*@egen*/
  	t1=<ID> { jjtn000.setName(t1.image);}
		( <DOT> t2=<ID> { jjtn000.setNameId2(t2.image);} )? <LPAR>


  	try {
	 ( ArgumentList() )? <RPAR>
	}
	catch(ParseException parse) {
	  System.out.println("CATCH CALL");
		skipto(RPAR);

		Token t = getToken(1);
		System.out.println("Next: " + t);
		if(t.kind==LCHAVETA) {
		  ErrorBlock();
		  /*getNextToken();
		  Stmtlst();*/

		}

		else if(t.kind==PVIRG) {
		  getNextToken();
		}

		return;
	}

	 <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Call():{/*@bgen(jjtree) Call */
             ASTCall jjtn000 = new ASTCall(JJTCALL);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
  	t1=<ID> { jjtn000.setName(t1.image);}
	( <DOT> t2=<ID> { jjtn000.setNameId2(t2.image);} )? <LPAR>

	try {
	  ( ArgumentList() )? <RPAR >
	}

	catch(ParseException parse) {
		skipto(RPAR);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/


}
void ArgumentList():{/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
 	Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Argument():{/*@bgen(jjtree) Argument */
                 ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
  	( t=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setName(t.image);} | t=<STRING>/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/{jjtn000.setString(t.image);} | t=<INTEGER>/*@bgen(jjtree)*/
                                                                                                   {
                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                     jjtc000 = false;
                                                                                                   }
/*@egen*/{jjtn000.setInteger(t.image);} )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAccess():{/*@bgen(jjtree) ArrayAccess */
                    ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/
	t=<ID> {jjtn000.setName(t.image); } <LPAR_RECT> Index() <RPAR_RECT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ScalarAccess():{/*@bgen(jjtree) ScalarAccess */
                     ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token size;}
{/*@bgen(jjtree) ScalarAccess */
        try {
/*@egen*/
	t=<ID> {jjtn000.setName(t.image); } ( <DOT> size=<SIZE> {jjtn000.setSize(size.image);})?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Index():{/*@bgen(jjtree) Index */
              ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
                try {
/*@egen*/
		(t=<ID> | t=<INTEGER>)/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {jjtn000.setName(t.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void ErrorBlock(): {/*@bgen(jjtree) ErrorBlock */
  ASTErrorBlock jjtn000 = new ASTErrorBlock(JJTERRORBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ErrorBlock */
        try {
/*@egen*/
	<LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}