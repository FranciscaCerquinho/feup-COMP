/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  LOOKAHEAD=1;
}

PARSER_BEGIN(parserGrammar)

public class parserGrammar
{
  public static void main(String args []) throws ParseException
  {
    parserGrammar parser = new parserGrammar(System.in);
	parser.Module();
  }
}

PARSER_END(parserGrammar)

JAVACODE
void skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}

<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

void Module():{}
{
  		<MODULE> <ID> <LCHAVETA>  ( Declaration() )* ( Function() )* <RCHAVETA>

}

void Declaration():{}
{
   
( LOOKAHEAD(<ID>"[" "]") ArrayElement() | ScalarElement() ) ( <ASSIGN> ( ( "[" ArraySize() "]" ) | (<ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>

}


void Function():{}
{
  try {
    
  ( LOOKAHEAD(3) ( <FUNCTION> ( LOOKAHEAD(2) ArrayElement() | ScalarElement() ) <ASSIGN> <ID> <LPAR> (
Varlist() )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist() )? <RPAR> ) )
<LCHAVETA> Stmtlst() <RCHAVETA>
	}
	catch(ParseException exception) {
		System.out.println("Chegou aqui2");
		 //System.out.println(exception.currentToken.image);
		 //System.out.println(exception.getMessage());
	  	skipto(LPAR);	  	Varlist();
/*	  	skipto(LCHAVETA);
	  	Stmtlst();
	  	skipto(RCHAVETA);*/
	
	}
}

void Varlist():{}
{
  try { 
( LOOKAHEAD(2) ArrayElement() | ScalarElement() ) ( <VIRG> ( LOOKAHEAD(2) ArrayElement() | ScalarElement() ))*

}

catch(ParseException exception) {

	skipto(RPAR);
}
}

void ArrayElement():{}
{
<ID> "[" "]"
}

void ScalarElement():{}
{
<ID>
}

void Stmtlst():{}
{
( Stmt() )*
}

void Stmt():{}
{
try {
  While()
| If()
| LOOKAHEAD(3) Assign()
| Call() <PVIRG>
}

catch(ParseException exception) {
  System.out.println("Chegou stmt");
  skipto(PVIRG);
}

}

void Assign():{}
{
Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs():{}
{
 LOOKAHEAD(2) ArrayAccess()
| ScalarAccess()
}

void Rhs():{}
{
( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? )
| "[" ArraySize() "]"
}

void ArraySize():{}
{
ScalarAccess()
| <INTEGER>
}

void Term():{}
{
( <ADDSUB_OP> )? ( <INTEGER> | LOOKAHEAD(3) Call() | LOOKAHEAD(2) ArrayAccess() | ScalarAccess()
)
}

void Exprtest ():{}
{
  try { 
 <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}

catch (ParseException exception) {
  skipto(RPAR);
}
}

void While():{}
{
try { 
<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

catch(ParseException exception) {
  System.out.println("Chegou ao while");
	skipto(LCHAVETA);
	Stmtlst();
	skipto(RCHAVETA);
	
}


}

void If():{}
{
 <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA>
Stmtlst() <RCHAVETA> )?
}

void Call():{}
{
<ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}

void ArgumentList():{}
{
 Argument() ( <VIRG> Argument() )*
}

void Argument():{}
{
  ( <ID> | <STRING> | <INTEGER> )
}

void ArrayAccess():{}
{
<ID> "[" Index() "]"
}

void ScalarAccess():{}
{
<ID> ( "." <SIZE> )?
}

void Index():{}
{
<ID>
| <INTEGER>
}
