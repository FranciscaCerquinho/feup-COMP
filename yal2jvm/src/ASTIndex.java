/* Generated By:JJTree: Do not edit this line. ASTIndex.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTIndex extends SimpleNode {
  private String name;
  private String constant;

      public ASTIndex(int id) {
        super(id);
      }

      public ASTIndex(parserGrammar p, int id) {
        super(p, id);
      }

      public String getName() {
    	  return name;
      }

      public void setName(String name) {
    	  this.name = name;
      }

      public void setConst(String constant) {
    	  this.constant = constant;
      }

      public String toString() {
    	  String test;

        if(name != null)
    	   test = super.toString() + " " + name;
        else
          test = super.toString() + " " + constant;

        return test;
      }

      public int analyseContent(SymbolsTable currentTable){
        System.out.println("Analyse Index");
        if(currentTable.returnSymbol(name) != null){
    			System.out.println("This value exists on Symbols Table");

          return 1;
    		}
        else if(constant != null){
    			System.out.println("This value exists on Symbols Table");

          return 1;
    		}

        System.out.println("This value doesn't exist!");

        return -1;
      }

      public String convertToByteCodes(MapVariables mapVariables){
        String line = "";

        if(constant != null) {
          if(Integer.parseInt(constant) > 5 || Integer.parseInt(constant) < 0)
            line += "bipush " + constant + "\n";
          else
            line += "iconst_" + constant + "\n";

        }
        if(mapVariables.existsGlobalVariable(name)){
          Node node = this.jjtGetParent();
          while(node.getId() != parserGrammarTreeConstants.JJTMODULE) {
            node = node.jjtGetParent();
          }
          String module = ((ASTModule)node).getName();
          if(mapVariables.getGlobalVariableIsScalar(name))
          line += "getstatic " + module + "/" + name + " I\n";
        else
          line += "getstatic " + module + "/" + name + " [I\n";
        }
        else{
          if(this.name!=null){
            line += "iload_" +  mapVariables.returnByteCode(name) + "\n";
          }
        }

        return line;
      }


}
/* JavaCC - OriginalChecksum=1d244425685d177203b0429512a9d965 (do not edit this line) */
