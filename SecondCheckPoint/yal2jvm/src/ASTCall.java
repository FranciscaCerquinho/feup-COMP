/* Generated By:JJTree: Do not edit this line. ASTCall.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTCall extends SimpleNode {
  private String name;
  private String nameId2;

  public ASTCall(int id) {
    super(id);
  }

  public ASTCall(parserGrammar p, int id) {
    super(p, id);
  }

  public String getName() {
    return name;
  }

  public String getNameId2() {
    return nameId2;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void setNameId2(String name) {
    this.nameId2 = name;
  }

  public String toString() {
    String test = super.toString();

  if(name != null)
    test+= " " + name;

  if(nameId2 != null)
    test+= " " + nameId2;

    return test;
  }

  @Override
  public boolean analyse(SymbolsTable currentTable){
    if(name.equals("io"))
      return true;

    System.out.println("Call: The function doesn't call io and I'll go trough children");
    analyseContent(currentTable);
    return true;
  }

  @Override
  public boolean analyseContent(SymbolsTable currentTable){
    System.out.println("Analyse children of Call");

    for(int i=0; i < jjtGetNumChildren();i++){
      jjtGetChild(i).analyse(currentTable);
    }

    return true;
  }

  public boolean analyseRhs(SymbolsTable currentTable){
    System.out.println("Analyse the right part of Call");

    if(name.equals("io"))
      return true;

    if(nameId2 != null){
      return true;
    }
    else{
      Symbol symbol = currentTable.returnSymbol(name);
      if(symbol != null){
        return symbol.isScalar();
      }
    }

    return true;
  }

  public void convertToByteCodes(MapVariables mapVariables){
    for(int i = 0; i < jjtGetNumChildren(); i++){
        jjtGetChild(i).convertToByteCodes(mapVariables);
    }

    if(nameId2 == null){
      SimpleNode node = (SimpleNode)this;
      while(node.jjtGetParent() != null) {
        node = (SimpleNode)node.jjtGetParent();
      }
      String call = "invokestatic "+ node.getName() + "/" + name + "(";
      for(int i = 0; i < jjtGetNumChildren(); i++){
        call += jjtGetChild(i).checkArgumentsType();
      }
      call += ")";
      call += mapVariables.returnFunctionType(name);
      System.out.println(call);
      System.out.println();
    }
    else {
      String call = "invokestatic "+ name + "/" + nameId2 + "(";
      if(name.equals("io")) {
        if(nameId2.equals("println"))
          call += "I)V";
        else if (nameId2.equals("read"))
          call += ")I";
        else
          call += ")V";
      }
      else {
        if(nameId2.equals("size"))
          call += ")I";
        else
          call += ")V";
      }
      System.out.println(call);
      System.out.println();
    }
  }

}
/* JavaCC - OriginalChecksum=5426cbd81caaa60f1af1e93f4db8172e (do not edit this line) */
