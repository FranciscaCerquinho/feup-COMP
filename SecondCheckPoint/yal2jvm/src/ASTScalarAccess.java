/* Generated By:JJTree: Do not edit this line. ASTScalarAccess.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTScalarAccess extends SimpleNode {
  private String name;


public ASTScalarAccess(int id) {
  super(id);
}

public ASTScalarAccess(parserGrammar p, int id) {
  super(p, id);
}

public String getName() {
  return name;
}

public void setName(String name) {
  this.name = name;
}

public String toString() {
  String test;

  test = super.toString() + " " + name;

  return test;
}

public boolean analyseRhs(SymbolsTable currentTable){
  System.out.println("Analyse the right part of ScalarAccess");

  Symbol symbol = currentTable.returnSymbol(name);

  if(symbol == null)
    return true;
  else{
    return symbol.isScalar();
  }
}

public boolean analyseLhs(SymbolsTable currentTable, boolean value){
  System.out.println("Analyse the left part of ScalarAccess");

  Symbol symbol = currentTable.returnSymbol(name);

  if(symbol == null){
    currentTable.putOnHashMap(new Symbol("ScalarAccess",name,value));
  }

  else{
    if(value != symbol.isScalar())
      System.out.println("Semantic Error!");
  }

  return true;
}



  /** Accept the visitor. **/
  public Object jjtAccept(parserGrammarVisitor visitor, Object data) {

    return
    visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=1c9da1db451254ba7916629d9e5bbbaa (do not edit this line) */
